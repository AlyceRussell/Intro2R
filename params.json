{"name":"A Light Introduction to R","tagline":"","body":"Today's workshop will focus on learning the basics in R, so that you may apply this to your own projects in the future. \r\n\r\n### Learning Objectives \r\n\r\n  * To gain familiarity with the various panes in RStudio \r\n  * To learn some of the basics of the R language\r\n  * To explore some of the various data types and structures\r\n  * To acquire experience with importing, exporting and manipulating data \r\n  * To develop an appreciation for the various R packages and functions\r\n\r\n***\r\n\r\n###What is R?\r\n\r\nR is an environment and language for performing data mining as well as statistical analyses.\r\n\r\n  * It is an expressive language\r\n  * Can perform simple analyses or write complex programs\r\n  * Highly extensive repositiory of packages available (see https://cran.r-project.org/web/packages/ for full packages)\r\n  * There are numerous publicly available real world datasets  \r\n\r\nR also possesses highly sophistocated graphics capabilities...\r\n\r\n```{r, echo=FALSE}\r\n#install.packages(\"plot3D\")\r\nlibrary(plot3D)\r\n\r\npar(mfrow = c(2, 2), mar = c(0, 0, 0, 0))\r\n\r\n# Shape 1\r\nM <- mesh(seq(0, 6*pi, length.out = 80),\r\nseq(pi/3, pi, length.out = 80))\r\nu <- M$x ; v <- M$y\r\nx <- u/2 * sin(v) * cos(u)\r\ny <- u/2 * sin(v) * sin(u)\r\nz <- u/2 * cos(v)\r\nsurf3D(x, y, z, colvar = z, colkey = FALSE, box = FALSE)\r\n\r\n# Shape 2: add border\r\nM <- mesh(seq(0, 2*pi, length.out = 80),\r\nseq(0, 2*pi, length.out = 80))\r\nu <- M$x ; v <- M$y\r\nx <- sin(u)\r\ny <- sin(v)\r\nz <- sin(u + v)\r\nsurf3D(x, y, z, colvar = z, border = \"black\", colkey = FALSE)\r\n\r\n# shape 3: uses same mesh, white facets\r\nx <- (3 + cos(v/2)*sin(u) - sin(v/2)*sin(2*u))*cos(v)\r\ny <- (3 + cos(v/2)*sin(u) - sin(v/2)*sin(2*u))*sin(v)\r\nz <- sin(v/2)*sin(u) + cos(v/2)*sin(2*u)\r\nsurf3D(x, y, z, colvar = z, colkey = FALSE, facets = FALSE)\r\n\r\n# shape 4: more complex colvar\r\nM <- mesh(seq(-13.2, 13.2, length.out = 50),\r\nseq(-37.4, 37.4, length.out = 50))\r\nu <- M$x ; v <- M$y\r\nb <- 0.4; r <- 1 - b^2; w <- sqrt(r)\r\nD <- b*((w*cosh(b*u))^2 + (b*sin(w*v))^2)\r\nx <- -u + (2*r*cosh(b*u)*sinh(b*u)) / D\r\ny <- (2*w*cosh(b*u)*(-(w*cos(v)*cos(w*v)) - sin(v)*sin(w*v))) / D\r\nz <- (2*w*cosh(b*u)*(-(w*sin(v)*cos(w*v)) + cos(v)*sin(w*v))) / D\r\nsurf3D(x, y, z, colvar = sqrt(x + 8.3), colkey = FALSE,\r\nborder = \"black\", box = FALSE)\r\n```\r\n\r\n *Code to produce these figures are found in the documentation for the `Plot3D` package.*\r\n\r\n####Datasets\r\n\r\n  * Many packages come with embedded datasets to practise the given analyses.\r\n  * There is a `Datasets` package available. More details on its datasets can be found at https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html\r\n  \r\n***\r\n\r\n###Downloading and Installing R and RStudio\r\n\r\n####Windows OS\r\n\r\n**R**\r\n\r\n  * Download the latest version of R from  http://cran.r-project.org/bin/windows/base/\r\n  * Run the .exe file and follow the steps\r\n\r\n**RStudio**\r\n\r\n  * Download RStudio from http://rstudio.org/download/desktop\r\n  * Run the .exe file and follow the steps\r\n  \r\n####Mac OS\r\n\r\n**R**\r\n\r\n  * Download the latest version of R from http://cran.r-project.org/bin/macosx/\r\n  * Open the .pkg file and follow the steps\r\n\r\n**RStudio**\r\n\r\n  * Download RStudio from http://rstudio.org/download/desktop\r\n  * Run the .dmg file and follow the steps\r\n  \r\n***\r\n\r\n###RStudio\r\n\r\nThroughout this workshop, we will be using RStudio: a free, open source R integrated development\r\nenvironment.\r\n\r\nThe advantage of RStudio is that it's user friendly, particularly to those who do not have a\r\ncomputer science background (myself included!). \r\n\r\n####Basic Layout\r\n\r\nWhen you first open RStudio, you will be greeted by three panels:\r\n\r\n  * The interactive R console (entire left)\r\n  * Workspace/History (tabbed in upper right)\r\n  * Files/Plots/Packages/Help (tabbed in lower right)\r\n  \r\nOnce you open files, such as R scripts, an editor panel will also open\r\nin the top left.\r\n\r\n####Executing Commands\r\n\r\nThere are a few ways you can execute commands in RStudio. You can run code from the current line by:\r\n\r\n  1. clicking the \"Run\" key in the top right corner of the editor panel\r\n  2. going to \"Code\" menu then \"Run Line(s)\"\r\n  3. hit `Ctrl+Enter` in Windows or Linux OS, or `Command+Enter` in Mac OS\r\n  4. hit `Ctrl+R` in Windows OS\r\n  \r\nYou can also highlight a code chunk and use the above options.\r\n\r\n####Accessing Help\r\n\r\n  * Type '?keyword' in the console panel if the package is loaded. For example, ?sum or ?plot\r\n  * Type '??keyword' in the console panel if the package/function is unknown\r\n  * Type 'help(keyword) in the console panel. For example, help(sum) or help(plot)\r\n  * In RStudio, go to the help menu then R help, type in keywords to see options\r\n\r\n####The Infamous Working Directory\r\n\r\nThe working directory is where you import files from and export files to when using R.\r\n\r\nTo find your current working directory at anytime... \r\n\r\n```{r}\r\ngetwd()\r\n```\r\n\r\nNow you need to create a folder named \"R_Intro\" on your Desktop for this workshop session. You can then change your working directory to this folder using... \r\n\r\n```{r}\r\nsetwd(\"C:/Users/aruss_000/Desktop/R_Intro\")\r\n```\r\n\r\n>Did you notice that we've had to change the direction of the slashes to forward facing rather than reverse facing??\r\n\r\nYou can find the folder pathway to insert into the above function by right clicking the folder icon on your Desktop, clicking Properties, and finding the path for the Location on the General tab. You can do this for any folder on your computer that you wish to use as your working directory. \r\n\r\n####Navigation\r\n\r\n  * Use the up and down arrows in the interactive R console (bottom left) to scroll through and even edit previous commands.\r\n  * Use `Ctrl+L` in Windows (or `Alt+88+L` in Mac) to clear the console.\r\n  \r\n####Starting a New Script\r\n\r\nRecord all your tasks on an *R Script*, including comments for each of your steps so that you may refer back to them later on (especially good when you are new to R and relying on online documentation). You can add comments to a function or assignment using the `#` key. Anything right of this key is ignored by the editor panel. \r\n\r\n```{r}\r\nq <- c(2, 5, 4, 7, 1, 8, 10)\r\nt <- 3*q  #multiply all values in q vector by 3\r\nt\r\n```\r\n\r\nYou should always start your script with a purpose/title and the date. The `#` key is useful for this as well.\r\n\r\n```{r}\r\n#######################\r\n#\r\n#  EDA on DASS dataset\r\n#\r\n#  Created: 22/02/2016\r\n#\r\n#  Updated: 29/02/2016\r\n#\r\n#######################\r\n```\r\n\r\n\r\n***\r\n\r\n###R Language Basics \r\n\r\n####Assignment\r\n\r\nOne of the most important things you will learn in R is the assignment of a dataset/matrix/vector/value/character to a variable of your choosing. For assignment you can use either \"=\" or \"<-\", though I personally prefer to use \"<-\" for assignment and \"=\" when you're running a logical argument (more on that later). \r\n\r\nR can be thought of as a sophisticated calculated as well as programming environment. For example, you can assign values to variables and then use these in equations you assign to new variables, as follows...\r\n\r\n```{r}\r\na <- 1\r\nb <- 2\r\nc <- a + b\r\nc\r\n```\r\n\r\n>NOTE: R is case sensitive, thus \"Hey\", \"HEY\" and \"hEY\" will be considered as different variables within the R environment. Use CamelCase to write all your variables and avoid confusion!!\r\n\r\n####R's view on Space\r\n\r\nR does not recognise spaces in sentences. The following are equivalent...\r\n\r\n```{r}\r\na1 <- 2 + 2\r\na2<-2+2\r\na1\r\na2\r\n```\r\n\r\nIn saying this, all R variables need to contain no spaces. This is why CamelCase is useful. You can also use other symbols, such as `_` or `.`, in your variable name. \r\n\r\nThe key is to choose variable names that aren't too laborious when typing, intuitive to the information they contain and aren't too confusing when compared with other variables in your current R environment (so you don't accidently include the wrong variable in your analysis).\r\n\r\nIn some cases, an assignment needs to be made over a few lines. For this, you can press `Enter` during the command and it will take you to a new but indented line, as shown in the below plot code.\r\n\r\n```{r, echo=FALSE, warning=FALSE}\r\ndev.off()   #resets plotting settings from first image\r\n```\r\n\r\n```{r}\r\nq <- c(2, 5, 4, 7, 1, 8, 10)\r\nw <- c(1, 2, 3, 4, 5, 6, 7)\r\nplot(q, w, main=\"Example Plot\",\r\n     type=\"b\", col=\"pink\", lwd=\"5\")\r\n```\r\n\r\n####Some Final Pointers\r\n\r\nAssignment should never be made to a variable that is also a name of a standard function (for example, sum or sd or max).\r\n\r\nYou can assign the last value or expression to a new variable using the `.Last.value` function.\r\n```{r}\r\nz <- .Last.value\r\n```\r\n\r\n***\r\n\r\n###R as a Giant Calculator\r\n\r\nBefore we look at some examples using R as a calculator, we need to first explore the arithmetic and logical operators it uses.\r\n\r\n####Arithmetic Operations\r\n\r\n| Operator  |  Description   |  \r\n| --------- | -------------  | \r\n| +         | Addition       | \r\n| -         | Subtraction    | \r\n| *         | Multiplication |\r\n| /         | Divide         | \r\n| ^         | Exponentiation |\r\n\r\nBelow are some examples of the above operators...\r\n```{r}\r\n2 + 3\r\n20 - 13\r\n2 * 3 \r\n6 / 3\r\n2^2\r\n```\r\n\r\nIt is important to note that R acts like other calculators, in that there is an order of operations. You can use the term **PIMDAS** to remember this order...\r\n\r\n  * **P**arentheses (i.e. brackets)\r\n  * **I**ndices (i.e. exponents)\r\n  * **M**ultiplication\r\n  * **D**ivision\r\n  * **A**ddition\r\n  * **S**ubtraction\r\n  \r\nUtilise the parentheses to force the order of operations. See below for an example of this (they don't give the same answer).\r\n\r\n```{r}\r\n5*2+3/8\r\n5*(2+3)/8\r\n```\r\n\r\n####Logical Operations\r\n\r\n| Operator  |  Description             |\r\n| --------- | ------------------------ |\r\n| ==        | Equals                   |\r\n| !=        | Not equal to             |\r\n| <         | Less than                |\r\n| >         | Greater than             |\r\n| <=        | Less than or equal to    |\r\n| >=        | Greater than or equal to |\r\n| &         | And                      |\r\n| |         | Or                       |\r\n| !         | Not                      |\r\n\r\nBelow are some examples of the above operators...\r\n```{r}\r\n2 == 3\r\n2 + 3 == 4 + 1\r\n2 != 3\r\n2 < 3\r\n2 > 3\r\n4 <= 8\r\n4 >= 8\r\n2 < 3 & 8 > 4\r\n2 > 3 | 4 < 8\r\nd <- 3\r\n!d > 3\r\n```\r\n\r\n> NOTE: Logical functions are great in large datasets when you are checking your data (i.e. any values less than an arbitary cut-off, missing values, etc...).\r\n\r\n####Mathematical Functions\r\n\r\nBelow are some mathematical function you will come across during the workshop or may be of use to you. There are many others available in R. You can explore these \r\n\r\n| Function              |  Description                                  |\r\n| --------------------- | -------------------------------------------   |\r\n| sin/cos/tan(x)        | Sine, Cosine, Tangent                         |\r\n| asin, acos, atan(x)   | Inverse of Sine, Cosine, Tangent              |\r\n| log(x)                | Logarithm of base e                           |\r\n| log2(x), log10(x)     | Logarithm of base 2 or 10                     |\r\n| exp(x)                | Exponential                                   |\r\n| round(x, digits=0)    | Rounding a number to 0 decimals               |\r\n| signif(x, digits=3)   | Rounding a number to 3 significant digits     |\r\n| sqrt(x)               | Squareroot                                    |\r\n| factorial(x)          | Calculates factorial of a given number        |\r\n| choose(n, k)          | Returns number of combinations, *k* elements from *n* possibilities |\r\n| abs(x)                | Returns absolute value of *x*                 |\r\n\r\n####Scientific Notation\r\n\r\nReally small or large numbers use scientific notation, and R presents this in a certain way. You can either write a scientific notation as 2e-3 or 2*10^(-3): both will give you the same answer but one is easier to read and write.\r\n\r\n```{r}\r\n3/40000\r\n5000000000\r\n\r\n1/1300000\r\n5e-2\r\n6e4\r\n```\r\n\r\n***\r\n###Data Types in R\r\n\r\nData in R is not exclusively numeric; there are a number of different types of data.\r\n  \r\n  * Numeric\r\n    + Integer (2, 5, ...)\r\n    + Double (1.3, -2.56, ...)\r\n    + Complex (a square root of a negative number, i.e. contains imaginary numbers)\r\n    + Logical (0 or 1 as a result from a test)\r\n  * Character (\"John\", \"This is some code\", ...)\r\n    + Date/Time (Sep 1, 2012, 24/3/2013, January 5 2009, ...)\r\n  * Factor (SES may have \"Low\", \"Middle\", \"High\"; or Likert on questionnaire \"1\", \"2\", \"3\", \"4\", \"5\")\r\n\r\nYou can test for and even convert the data type using typeof() and as.xxxx(), where \"xxxx\" can be \"numeric\", \"factor\", \"double\", \"integer\", \"complex\", \"character\", \"logical\".\r\n\r\n####Data Conversions\r\n\r\n| Converting from...  | Converting to...  |  Result                                                         |\r\n| ------------------- | ----------------  | --------------------------------------------------------------- |\r\n| Integer             | Double/Complex    | Number is maintained when back to Integer                       |\r\n| Double              | Integer           | Decimal is lost                                                 |\r\n| Double              | Complex           | Number is maintained when back to Double                        |\r\n| Complex             | Double/Integer    | Imaginary part is lost                                          |\r\n| Double/Integer      | Logical           | Value TRUE is returned for everything except 0, which is FALSE  |\r\n| Logical             | Double/Integer    | Value of 0 for FALSE and 1 for TRUE                             |\r\n| Anything            | Factor            | Becomes Factor levels of variable                               |\r\n| Character           | Numeric           | Only if characters are numbers, otherwise returns NA            |\r\n\r\n\r\n```{r}\r\na <- c(1, 2, 3, 4, 5)\r\ntypeof(a)  #double is default for numbers\r\nb <- as.integer(a)  #converts double into integer\r\ntypeof(b)\r\nc <- as.factor(a)  #converts integer into factor\r\ntypeof(c)  \r\nlevels(c)  #calls levels of a factor\r\n```\r\n\r\n***\r\n\r\n###Data Structures in R\r\n\r\nThere are a number of different data structures in R, which include:\r\n\r\n  * Scalers/Variables (0-dimensional)\r\n  * Vectors (1-dimensional)\r\n  * Matrices (2-dimensional)\r\n  * Arrays (n-dimensional)\r\n  * Data frames (Standard in datasets)\r\n  * Lists \r\n  \r\nYou can assign any of these data structures to a variable and perform a number of tasks. I will only introduce you to some basic operations with these structures today. \r\n\r\n**Vectors**\r\n\r\nVectors are a string of values greater than 1, and there are a number of ways to generate vectors.\r\n```{r}\r\nv1 <- 3  #assign single value, as a scaler/variable example\r\nv1\r\nv2 <- c(2, 4, 6, 8, 0)  #use c() to assign a number of values\r\nv2\r\nv3 <- c(2*3:7 - 1)  #assign numbers 1-5 then 8-10.  \r\nv3\r\nv4 <- rep(1:4, times=3)  #assign numbers 1-4 3 times\r\nv4\r\nv5 <- rep(1:4, each=3)  #assign numbers 1-4, with 3 of each\r\nv5\r\nv6 <- seq(from=0, to=10, by=0.5)  #create number sequence with 0.5 increments... ?seq for more options\r\nv6\r\nv7 <- exp(v2)  #assign values from previous variable using a mathematical function\r\nv7\r\nv8 <- rnorm(n=20, mean=0, sd=1)  #random sampling from a normal (Gaussian) distribution\r\nv8\r\nv9 <- paste(\"Demo_\", rep(LETTERS[1:4], each=3), c(1:10), sep=\"\")  #sequentially pastes numerous vectors together\r\nv9\r\n```\r\n\r\nYou can also perform a number of tasks using vectors. \r\n\r\n```{r}\r\nv <- v1 * v2 #performs element-wise multiplication\r\nv\r\nu <- v3[3] + v5  #v3[3] subsets element 3 from v3, then adds it element-wise to v5\r\nu\r\nw <- v - u  #u and v are different lengths, v is shorter, so R cycles over v until all of u has been element-wise subtracted\r\nw  \r\nx <- sum(v6)  #takes sum of elements in v6\r\nx\r\ny <- x/length(v6)  #calculates the mean (sum divided by the length or number of data points)\r\ny\r\nmean(v6)\r\nsd(v6)\r\nmin(v7)\r\n```\r\n\r\nNow to extend those tasks...\r\n\r\n```{r}\r\nqt <- c(0, .01, .025, .05, .1, .25, .5, .75, .9, .95, .975, .99, 1)  #vector of quantiles\r\nz <- signif(qnorm(qt, 0, 1), 3)  #calculates the z-scores of standard normal distribution quantiles, and gives answers to 3 significant figures\r\nz\r\npaste(\"Quantile\", qt, \"=\", z, sep=\" \")  #creates vector of quantiles and z-scores\r\n```\r\n\r\n**Matrices**\r\n\r\nMatrices are 2-dimensional vectors. Below are some examples of generating matrices in R.\r\n\r\n```{r}\r\na <- matrix(data=seq(1, 42, length=21), ncol=3)  #creates matrix, 3 columns\r\na\r\nb <- matrix(data=seq(1, 42, length=21), nrow=7, ncol=3, byrow=TRUE)  #fills matrix by row instead of column\r\nb\r\nc <- matrix(seq(1, 42, length=21), 7, 3, TRUE)  #same as previous code with option names omitted - must be in right order\r\nc\r\nd <- diag(4)  #creates 4x4 identity matrix\r\nd\r\n```\r\n\r\nThere are many ways of manipulating matrices. \r\n\r\n```{r}\r\na[1,]  #displays first row of matrix \r\na[,1]  #displays first column of matrix\r\ne <- rbind(a[2,], a[6,])  #row binds the second and sixth rows of matrix together\r\ne\r\nf <- cbind(e, c(2, 3))  #column binds matrix e with new vector\r\nf\r\ng <- matrix(1:4, 2)  #creates matrix with 2 rows\r\nh <- matrix(5:8, 2)\r\ng + h  #element wise addition\r\ng * h  #element wise multiplication\r\ng %*% h  #matrix multiplication\r\ng %o% h  #outer product\r\nt(c)  #transpose matrix\r\nsolve(g)  #inverse of matrix (must be a square matrix)\r\ndiag(h)  #shows diagonal elements of matrix (unlike diag(4) in above example, which creates a 4x4 identity matrix)\r\nnrow(g)  #number of rows\r\nncol(h)  #number of columns\r\nrowMeans(a)  \r\nrowSums(a[,2:3])  #sums rows over columns 2 and 3. \r\ncolMeans(a)\r\ncolSums(a)\r\n```\r\n\r\n>NOTE: The basic structure for indexing a matrix/data frame is variable[row, column]. If you want all the rows but are only interested in indexing some of the columns (say, to sum questionnaire results), you leave the row part blank and only tell R which columns you are interested in. You can use the concatenate if need be to select columns not adjacent to each other: e.g. rowSums(x[,c(1, 3:5)]) \r\n\r\n**Data Frames**\r\n\r\nWhen you are manipulating your imported datasets, they are more often than not structured as a data frame. In data frames, the observations are the rows and the variables are the columns. You can call out individual/groups of row/s column/s to perform a variety of tasks, which we will look at shortly. \r\n\r\n```{r}\r\nds1 <- data.frame(FirstName=c(\"Steve\", \"Amy\", \"John\"), LastName=c(\"Johnson\", \"O'Neil\", \"Smith\"), \r\n                  Age=c(20, 23, 19), Gender=c(\"M\", \"F\", \"M\"), CourseID=c(\"K05\", \"M22\", \"E04\"), \r\n                  WAM=c(67, 79, 62))  #creates a data frame\r\nds1\r\nnames(ds1)  #checking variable (column) names\r\nFullName <- paste(ds1$FirstName, ds1$LastName, sep=\" \")  #create new FullName variable\r\nds1 <- cbind(ds1, FullName)  #column bind new variable to data frame\r\nnames(ds1)  #checking data frame to see the newly attached FullName variable\r\nnames(ds1)[6] <- \"WeightedAverage\"  #changes name of 6th variable in the data frame\r\nnrow(ds1)  #counts number of rows. Use ncol(ds1) for number of columns. \r\ndim(ds1)  #gives row and then column count for data frame\r\nmean(ds1$WeightedAverage)  #gives mean weighted average mark between students\r\nds1[1,6] = 70  #this will index to the individual in row 1's WAM result and update it to 70\r\nds1\r\n```\r\n\r\n>NOTE: When coding a data frame, the columns all have to have the same number of observations. Missing values can be denoted with NA. \r\n\r\nWe will look at some additional tricks with data frames at the end.\r\n\r\n**Lists**\r\n\r\nLists can store information from a number of different vectors of unequal length and different data types. The output of many statistical tests in R are stored in lists and individual parts of the test results can be called out in the same fashion  you call out individual variables in data frames (e.g. ds1$FullName). I will not go into list generation today but you can look it up using `?list` in the interactive console (bottom left).\r\n\r\n***\r\n\r\n###Working with Missing Values\r\n\r\nThe R function `is.na()` can be used to see whether there are any missing values in a dataset/matrix/vector/variable.\r\n```{r}\r\nr <- c(2, NA, 4, 6, 8, 10)\r\nis.na(r)\r\n```\r\n>NOTE: R reads missing values as NA, which is an indication of missingness. \r\n\r\nYou can replace these in functions, for example, using an imputed mean or some other suitable value, or simply remove rows/columns of data that contain missing values (not recommended in the statistics community). \r\n\r\n```{r, warning=FALSE}\r\nm <- as.data.frame(matrix(c(2:6, NA, 15:16, NA, 17, 22, 10), ncol=3))\r\nm\r\nis.na(m) #will return TRUE or FALSE for each data point\r\nlength(m[is.na(m)]==TRUE)  #counts missing values in dataset using a logical argument for the above function\r\nlength(m$v1[is.na(m)]==TRUE)  #counts missing values in the first column\r\nmean(m)  #calculates mean of all values, won't work if missing values exist\r\nmean(as.matrix(m), na.rm=TRUE)  #omits missing values from calculation of the mean\r\n\r\nm_mean <- mean(as.matrix(m), na.rm=TRUE)  #puts calculated mean for non-missing values into a new variable\r\n\r\nm <- as.matrix(m)\r\nfor (i in 1:length(m)){   #length() used to find number of values in the matrix\r\n  if (is.na(m[i])){\r\n    m[i] = m_mean      #simple loop that adds imputed mean to missing data points\r\n  } else {            \r\n    m[i] = m[i]\r\n  }\r\n}\r\nm\r\n```\r\n\r\nAs you may have noticed in the last bit of code, I changed a matrix into a data frame for some tasks then back to a matrix. You can do this using the `as.xxxx` function, where the xxxx can be matrix, data.frame, etc... I did this because certain functions work better in either format.  Knowing which data structure to use for a given task will come with practise.\r\n\r\n***\r\n###Working with Packages\r\n\r\nWhen you downloaded R, you installed a number of base packages. You can check which packages are currently installed in your environment using\r\n\r\n```{r}\r\nsearch()\r\n```\r\n\r\nYou can see which packages are installed on your computer by going to the Packages tab in the bottom right console. Those with a checked box are currently active and others are not. You can load a package by clicking the box. You can also do this by typing `installed.packages()` in the interactive console.\r\n\r\nTo download a package off CRAN, where they are stored, you can click Install in the top right corner of the Package console, and then enter the name of the package you wish to install. You can also install packages onto your computer from CRAN and then load a package into your current R environment using the command console.\r\n\r\n```{r}\r\n#install.packages(\"datasets\")  #downloads datasets package off of CRAN \r\nlibrary(\"datasets\")  #loads package into R environment\r\nlibrary(help = \"datasets\")  #to find help documentation regarding specific package\r\n```\r\n\r\nGoogle is also your best friend here. Whenever I need to find something out, remembering I'm not a computer science major, I google \"R {test name or task}\" and there will usually be a number of pages containing code information. Some useful sites to look out for in the search are **stackoverflow.com**, **statmethods.net** (\"Quick-R\") and any R package documentation.\r\n \r\n***\r\n\r\n###Importing, Exporting and Manipulating Data\r\n\r\nAlthough you can create datasets in R, sometimes the easiest way to create and manage datasets (especially when you have many hundreds of data points) is in Excel and then import them into R. A USB will be passed around with some practise data. You need to save the files into your working directory. \r\n\r\nYou can store your data as a .txt file and import that way. You have to make sure that there are equal spaces between observations (double-click on the file in your \"Intro_R\" folder to see for yourself).\r\n\r\n```{r}\r\nprac <- read.table(file=\"E:/StatsJC/IntroR_Workshop/Prac_File.txt\", header=TRUE)  #read .txt file\r\nprac\r\n```\r\n\r\nAs a personal preference, I use .csv files for storing my study data. This is because I have not experienced any issues with it in R, as with some other formats. To save an Excel data file as a .csv file, you need to change the save format (drop down menu under file name) while saving your dataset. \r\n\r\nBelow we are going to import simulated data for distanced (m) in long jump acheived pre-, at 4 weeks and 8 weeks of a weight training program. Following this, we will perform some basic tasks and then save the data as a new file name.\r\n\r\n\r\n```{r}\r\njump <- read.csv(\"E:/StatsJC/IntroR_Workshop/jump.csv\", header=TRUE)\r\njump  #look at dataset\r\nhead(jump)  #will give you the top 6 observations so you can preview what the data looks like\r\njump$BMI <- jump$weight/((jump$height/100)^2)  #one way of creating a new variable\r\n```\r\n\r\n>NOTE: Use `DataName$VariableName` when referring to a single variable within your assigned data frame, e.g. `jump$weight`. You can also use this convention to create a new variable within a given data frame, e.g. `jump$BMI` in above code.  \r\n\r\n```{r}\r\nBMI2 <- jump$weight/((jump$height/100)^2)  #using order of operations here to \"guide\" calculations, e.g. parentheses 1st\r\njump <- cbind(jump, BMI2)   #another way of creating new variables is by utilising the cbind() function\r\njump  #we can see both methods of assigning BMI are equivalent\r\njump$BMI <- round(jump$BMI, 2)  #rounds the BMI variable to 2 decimal places\r\njump\r\njump$BMI2 <- NULL  #drops the BMI2 variable as we don't need it, BMI is equivalent\r\njump\r\nave_dist <- c(mean(jump$base), mean(jump$wave1), mean(jump$wave2))  #creates new vector containing means\r\nave_dist2 <- as.vector(c(colMeans(jump[,5:7])))  #same using colMeans function\r\n\r\nave_dist[1] == ave_dist2[1]  #checking 1st value in vector equivalent in both using a logical operator\r\nsd_dist <- c(sd(jump$base), sd(jump$wave1), sd(jump$wave2))\r\nave_improve <- ave_dist[3] - ave_dist[1]\r\njump$diff <- jump$wave2 - jump$base\r\n\r\nfor (i in 1:nrow(jump)){                    #this is a bit more complicated but we're\r\n  if(jump$diff[i] > ave_improve){           #creating a new variable for responder vs non-responder\r\n    jump$respond[i]=1                       #to the exercise program using the mean as an arbitary cut-off\r\n    } else {\r\n      jump$respond[i]=0\r\n    }\r\n}\r\njump\r\n\r\nlevels(jump$respond)  #check if our respond variable is a factor (compare groups)\r\njump$respond <- as.factor(jump$respond)  #change to factor then check again\r\nlevels(jump$respond)\r\nboxplot(jump$diff~jump$respond, main=\"Improvement in Long-Jump Distance\", names=c(\"Non-Responders\", \"Responders\"), ylab=\"Distance in Metres\")   #simple boxplot comparing improvement in long-jump distance between responders and non-responders\r\n\r\n```\r\n\r\n\r\n\r\n```{r}\r\n#write.table(file=\"E/StatsJC/IntroR_Workshop/Prac_File.txt\", header=TRUE, row.names=FALSE)  #save as .txt\r\n#write.csv(jump, \"E:/StatsJC/IntroR_Workshop/jump_160222.csv\", row.names=FALSE)  #save as .csv\r\n```\r\n\r\n\r\nDon't worry about trying to remember every function in R. You can simply look them up on google, or if you can remember the start of the function's name, use the `tab` completion in RStudio. \r\n\r\nTry typing `col` in the interactive console then press `tab` and navigate with the down key until you see a function called `colors`. You will find before you press enter that there is information regarding what the function does and its options.  \r\n\r\nThis is one advantage that RStudio has over R on its own: it has autocompletion abilities that allow you to more easily look up functions, their arguments, and the values that they take.\r\n\r\n***\r\n\r\n###That's all folks!!!\r\n\r\nThank you for coming down today and participating in this workshop. This was developed and run out of my own time, and I did it because I have had so many people express interest in learning R. Much of what I showed you today has been self-taught (i.e. it is not impossible to learn). I have learnt by getting on R in my own time, as well as participating in workshops when I can and completing online MOOCs. There is always more to learn and you will learn the same thing slighty differently off of different people, and in turn develop your own flavour of coding.   \r\n\r\nIf you ever get stuck, please feel free to flick me an email on a.russell@ecu.edu.au ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}